{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SA2DpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAnEPL,EAAKa,iBAAiB,UA6BtB,SAAsBC,GACpBA,EAAMC,iBAMN,IAJA,IAAgCC,EAAAF,EAAMG,OAAOC,SAArCC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEjBC,EAAeC,OAAOJ,EAAMK,OAEvBC,EAAI,EAAGA,GAAKJ,EAAOG,MAAOC,GAAK,EACtCtB,EAAcsB,EAAGH,GACdI,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,QAAQC,IAAI,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,OAC1D0B,EAAAjC,GAASkC,OAAOC,QACd,uBAAwCH,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD6B,OAAM,SAAAP,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,QAAQC,IAAI,sBAAuCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,OACzD0B,EAAAjC,GAASkC,OAAOG,QACd,sBAAqCL,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAIjDiB,GAAgBC,OAAOH,EAAKI,OAG9BV,EAAMG,OAAOmB,O,IArDfpC,EAAKa,iBAAiB,SAEtB,SAAqBC,GACnB,IAAgCE,EAAAF,EAAMuB,cAAcnB,SAA5Cb,EAAwBW,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEjBhB,EAAMmB,MAAQ,GAAKnB,EAAMmB,QAE3BO,EAAAjC,GAASkC,OAAOG,QACd,oDAEF9B,EAAMmB,MAAQ,GAGZJ,EAAKI,MAAQ,GAAKJ,EAAKI,QAEzBO,EAAAjC,GAASkC,OAAOG,QACd,oDAEFf,EAAKI,MAAQ,GAGXH,EAAOG,OAAS,GAAKH,EAAOG,QAE9BO,EAAAjC,GAASkC,OAAOG,QAAQ,+CACtBd,EAAKG,MAAQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onFormSubmit);\nform.addEventListener('input', onFormInput);\n\nfunction onFormInput(event) {\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  if (delay.value < 0 && delay.value) {\n    // alert('❌ The field value must be a positive number or 0');\n    Notiflix.Notify.failure(\n      '❌ The field value must be a positive number or 0'\n    );\n    delay.value = 0;\n  }\n\n  if (step.value < 0 && step.value) {\n    // alert('❌ The field value must be a positive number or 0');\n    Notiflix.Notify.failure(\n      '❌ The field value must be a positive number or 0'\n    );\n    step.value = 0;\n  }\n\n  if (amount.value <= 0 && amount.value) {\n    // alert('❌ The field value must be a positive number');\n    Notiflix.Notify.failure('❌ The field value must be a positive number');\n    amount.value = 1;\n  }\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.target.elements;\n\n  let currentDelay = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    currentDelay += Number(step.value);\n  }\n\n  event.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","_elements","target","elements","delay1","step","amount","currentDelay","Number","value","i","then","param","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure","reset","currentTarget"],"version":3,"file":"03-promises.9c51c805.js.map"}